pragma circom 2.0.0;

include "binsub.circom";
include "../circomlib/circuits/mux1.circom";

template ModulusWith25519(n) {
  signal input a[n];
  signal output out[255];

  var i;
  var p[255] = [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1];

  component sub;
  component mux;

  if (n < 255) {
    for (i=0; i<255; i++) {
      out[i] <== a[i];
    }
  } else {
    var i;
    var d[255];
    for (i=0; i<255; i++) {
      d[i] = a[i];
    }

    var e[n-255];
    for (i=0; i<(n-255); i++) {
      e[i] = a[255+i];
    }

    sub = BinSub(256);
    for (i=0; i<255; i++) {
      sub.in[0][i] <== d[i];
      sub.in[1][i] <== p[i];
    }
    sub.in[0][255] <== 0;
    sub.in[1][255] <== 0;

    mux = MultiMux1(255);
    for (i=0; i<255; i++) {
      mux.c[i][0] <== d[i];
      mux.c[i][1] <== sub.out[i];
    }
    mux.s <== sub.out[255];

    for (i=0; i<255; i++) {
      out[i] <== mux.out[i];
    }
  }
}

component main = ModulusWith25519(1000);